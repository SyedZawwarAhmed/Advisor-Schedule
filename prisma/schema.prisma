// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Add our custom relations
  calendarAccounts   CalendarAccount[]
  hubspotAccount     HubspotAccount?
  schedulingWindows  SchedulingWindow[]
  schedulingLinks    SchedulingLink[]
  meetings           Meeting[]

  // Email configuration
  emailHost     String?
  emailPort     Int?
  emailSecure   Boolean?  @default(false)
  emailUsername String?
  emailPassword String?
  emailFrom     String?
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

// Calendar integration
model CalendarAccount {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider            String   // "google"
  name                String
  email               String
  accessToken         String
  refreshToken        String
  expiresAt           DateTime
  calendarId          String
  calendarEvents      CalendarEvent[]
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  calendarAccountId   String
  calendarAccount     CalendarAccount @relation(fields: [calendarAccountId], references: [id], onDelete: Cascade)
  eventId             String   // Original ID from provider
  title               String
  description         String?
  startTime           DateTime
  endTime             DateTime
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// HubSpot integration
model HubspotAccount {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken         String
  refreshToken        String
  expiresAt           DateTime
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// Scheduling windows
model SchedulingWindow {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                String
  isActive            Boolean  @default(true)
  timeSlots           TimeSlot[]
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model TimeSlot {
  id                  String   @id @default(cuid())
  schedulingWindowId  String
  schedulingWindow    SchedulingWindow @relation(fields: [schedulingWindowId], references: [id], onDelete: Cascade)
  dayOfWeek           String   // Monday, Tuesday, etc.
  startTime           String   // HH:MM format
  endTime             String   // HH:MM format
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// Scheduling links
model SchedulingLink {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                String
  slug                String   @unique
  isActive            Boolean  @default(true)
  duration            Int      // in minutes
  maxDaysInAdvance    Int      // maximum days in advance for scheduling
  usageLimit          Int?     // optional maximum number of uses
  usageCount          Int      @default(0)
  expirationDate      DateTime?
  questions           Question[]
  meetings            Meeting[]
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Question {
  id                  String   @id @default(cuid())
  schedulingLinkId    String
  schedulingLink      SchedulingLink @relation(fields: [schedulingLinkId], references: [id], onDelete: Cascade)
  text                String
  order               Int
  answers             Answer[]
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// Meetings
model Meeting {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  schedulingLinkId    String
  schedulingLink      SchedulingLink @relation(fields: [schedulingLinkId], references: [id], onDelete: Cascade)
  startTime           DateTime
  endTime             DateTime
  clientEmail         String
  clientLinkedIn      String?
  status              String   // "scheduled", "cancelled", "completed"
  hubspotContactId    String?
  linkedInSummary     String?
  answers             Answer[]
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Answer {
  id                  String   @id @default(cuid())
  meetingId           String
  meeting             Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  questionId          String
  question            Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  text                String
  augmentedNote       String?
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}
